---
import { SITE_TAB, SITE_DESCRIPTION, SITE_FAVICON, SITE_LANGUAGE, SITE_THEME } from "@config";
import { ClientRouter } from "astro:transitions";
import ElementCrossing from "astro-vtbot/components/ElementCrossing.astro";
import PointerOnNavigation from "astro-vtbot/components/PointerOnNavigation.astro";
import Header from "@components/Header.astro";
import Sidebar from "@components/Sidebar.astro";
import Footer from "@components/Footer.astro";
import Navbar from "@components/Navbar.astro";
import MobileTOC from "@components/widgets/MobileTOC.astro";

const { title, image, description = SITE_DESCRIPTION, headings = [], showTOC = false, isIndexed = true } = Astro.props;
---

<!doctype html>
<html lang={SITE_LANGUAGE} class="bg-base-300" data-theme={SITE_THEME.light} data-theme-type="light">
  <head>
    <ClientRouter />
    <ElementCrossing />
    <PointerOnNavigation />
    <Header title={title} description={description} favicon={SITE_FAVICON} image={image} />
    <title>{`${title} - ${SITE_TAB}`}</title>

    <script define:vars={{ SITE_THEME }} is:inline>
      (function () {
        const storedTheme = localStorage.getItem("theme");
        const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
        let theme;
        if (storedTheme) {
          theme = storedTheme;
        } else {
          theme = prefersDark ? SITE_THEME.dark : SITE_THEME.light;
          localStorage.setItem("theme", theme);
        }
        document.documentElement.setAttribute("data-theme", theme);
        const themeType = theme === SITE_THEME.dark ? "dark" : "light";
        document.documentElement.setAttribute("data-theme-type", themeType);
        window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
          if (!localStorage.getItem("theme")) {
            const newTheme = e.matches ? SITE_THEME.dark : SITE_THEME.light;
            document.documentElement.setAttribute("data-theme", newTheme);
            const newThemeType = e.matches ? "dark" : "light";
            document.documentElement.setAttribute("data-theme-type", newThemeType);
            localStorage.setItem("theme", newTheme);
          }
        });
      })();
    </script>

    <!-- 点击粒子效果样式 -->
    <style is:inline>
      .click-particle {
        position: fixed;
        pointer-events: none;
        width: 14px;
        height: 14px;
        border-radius: 50%;
        z-index: 9999;
        animation: particle-explosion 1.1s ease-out forwards;
        box-shadow: 0 0 6px rgba(255, 255, 255, 0.8);
      }

      /* 暗色主题下的粒子效果 */
      .dark .click-particle {
        box-shadow: 0 0 8px rgba(255, 255, 255, 0.4);
      }

      @keyframes particle-explosion {
        0% {
          opacity: 1;
          transform: scale(0.4) translate(0, 0);
        }
        15% {
          opacity: 1;
          transform: scale(1.3) translate(var(--dx), var(--dy));
        }
        60% {
          opacity: 0.8;
          transform: scale(1) translate(calc(var(--dx) * 2.5), calc(var(--dy) * 2.5));
        }
        100% {
          opacity: 0;
          transform: scale(0.3) translate(calc(var(--dx) * 3.5), calc(var(--dy) * 3.5));
        }
      }

      /* 亮色主题粒子颜色 */
      .click-particle.color-1 {
        background: #ffc1cc;
        background: radial-gradient(circle, #ffb3ba 0%, #ffc1cc 100%);
      }

      .click-particle.color-2 {
        background: #bde4ff;
        background: radial-gradient(circle, #a8d8ff 0%, #bde4ff 100%);
      }

      .click-particle.color-3 {
        background: #fff2a8;
        background: radial-gradient(circle, #ffe66d 0%, #fff2a8 100%);
      }

      .click-particle.color-4 {
        background: #e6ccff;
        background: radial-gradient(circle, #d4a5ff 0%, #e6ccff 100%);
      }

      .click-particle.color-5 {
        background: #c1ffc1;
        background: radial-gradient(circle, #a8e6a8 0%, #c1ffc1 100%);
      }

      .click-particle.color-6 {
        background: #ffd4a3;
        background: radial-gradient(circle, #ffcc99 0%, #ffd4a3 100%);
      }

      .click-particle.color-7 {
        background: #c4e8ff;
        background: radial-gradient(circle, #b3deff 0%, #c4e8ff 100%);
      }

      .click-particle.color-8 {
        background: #f8d7da;
        background: radial-gradient(circle, #f5c2c7 0%, #f8d7da 100%);
      }

      .click-particle.color-9 {
        background: #d1f2d1;
        background: radial-gradient(circle, #c3e6c3 0%, #d1f2d1 100%);
      }

      .click-particle.color-10 {
        background: #fff0d4;
        background: radial-gradient(circle, #ffe8b3 0%, #fff0d4 100%);
      }

      /* 暗色主题粒子颜色 - 更深更鲜艳 */
      .dark .click-particle.color-1 {
        background: #ff6b8a;
        background: radial-gradient(circle, #ff4757 0%, #ff6b8a 100%);
      }

      .dark .click-particle.color-2 {
        background: #4fc3f7;
        background: radial-gradient(circle, #29b6f6 0%, #4fc3f7 100%);
      }

      .dark .click-particle.color-3 {
        background: #ffd54f;
        background: radial-gradient(circle, #ffca28 0%, #ffd54f 100%);
      }

      .dark .click-particle.color-4 {
        background: #ba68c8;
        background: radial-gradient(circle, #ab47bc 0%, #ba68c8 100%);
      }

      .dark .click-particle.color-5 {
        background: #81c784;
        background: radial-gradient(circle, #66bb6a 0%, #81c784 100%);
      }

      .dark .click-particle.color-6 {
        background: #ffb74d;
        background: radial-gradient(circle, #ffa726 0%, #ffb74d 100%);
      }

      .dark .click-particle.color-7 {
        background: #64b5f6;
        background: radial-gradient(circle, #42a5f5 0%, #64b5f6 100%);
      }

      .dark .click-particle.color-8 {
        background: #f48fb1;
        background: radial-gradient(circle, #f06292 0%, #f48fb1 100%);
      }

      .dark .click-particle.color-9 {
        background: #a5d6a7;
        background: radial-gradient(circle, #81c784 0%, #a5d6a7 100%);
      }

      .dark .click-particle.color-10 {
        background: #ffe082;
        background: radial-gradient(circle, #ffd54f 0%, #ffe082 100%);
      }
    </style>
  </head>

  <body class="flex flex-col min-h-screen" {...isIndexed ? { "data-pagefind-body": true } : {}}>
    <Navbar />

    <div class="max-w-6xl mx-auto w-full flex-grow">
      <div class="grid grid-cols-1 md:grid-cols-5 lg:grid-cols-4 gap-4 p-4 h-full">
        <main
          class="col-span-1 md:col-span-4 lg:col-span-3 bg-transparent order-1 md:order-2 mt-16 md:mt-0 flex flex-col gap-4"
        >
          <div class="flex-grow flex flex-col gap-4">
            <slot />
          </div>
          <Footer />
        </main>
        <aside class="col-span-1 bg-transparent order-2 md:order-1 md:top-4">
          <Sidebar headings={headings} showTOC={showTOC} />
          <slot name="sidebar" />
        </aside>
      </div>
    </div>

    <MobileTOC headings={headings} showTOC={showTOC} />

    <!-- 点击粒子效果脚本 -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        function createParticle(x, y, angle, distance, colorIndex) {
          const particle = document.createElement('div');
          particle.className = `click-particle color-${colorIndex}`;
          const dx = Math.cos(angle) * distance;
          const dy = Math.sin(angle) * distance;
          particle.style.setProperty('--dx', dx + 'px');
          particle.style.setProperty('--dy', dy + 'px');
          particle.style.left = x + 'px';
          particle.style.top = y + 'px';
          const size = Math.random() * 6 + 8;
          particle.style.width = size + 'px';
          particle.style.height = size + 'px';
          document.body.appendChild(particle);
          setTimeout(() => {
            if (particle.parentNode) {
              particle.parentNode.removeChild(particle);
            }
          }, 1100);
        }

        document.addEventListener('click', (e) => {
          const particleCount = 10;
          const baseDistance = 18;
          for (let i = 0; i < particleCount; i++) {
            const angle = ((Math.PI * 2) / particleCount) * i;
            const distance = baseDistance + Math.random() * 8;
            const colorIndex = (i % 10) + 1;
            setTimeout(() => {
              createParticle(e.clientX, e.clientY, angle, distance, colorIndex);
            }, i * 12);
          }
          for (let i = 0; i < 4; i++) {
            const randomAngle = Math.random() * Math.PI * 2;
            const randomDistance = baseDistance + Math.random() * 10;
            const colorIndex = Math.floor(Math.random() * 10) + 1;
            setTimeout(
              () => {
                createParticle(e.clientX, e.clientY, randomAngle, randomDistance, colorIndex);
              },
              (particleCount + i) * 12
            );
          }
        });
      });
    </script>

    <script define:vars={{ SITE_THEME }} is:inline>
      document.addEventListener("astro:after-swap", () => {
        const storedTheme = localStorage.getItem("theme");
        if (storedTheme) {
          document.documentElement.setAttribute("data-theme", storedTheme);
          const themeType = storedTheme === SITE_THEME.dark ? "dark" : "light";
          document.documentElement.setAttribute("data-theme-type", themeType);
        }
      });
    </script>

    <script is:inline>
      document.addEventListener("astro:page-load", () => {
        document.querySelectorAll(".btn-copy").forEach((button) => {
          button.addEventListener("click", async () => {
            const codeBlock = button.closest(".frosti-code");
            const code = codeBlock.querySelector("code").textContent;
            const copyIcon = button.querySelector(".frosti-code-toolbar-copy-icon");
            const successIcon = button.querySelector(".frosti-code-toolbar-copy-success");
            try {
              await navigator.clipboard.writeText(code);
              copyIcon.classList.add("hidden");
              successIcon.classList.remove("hidden");
              button.classList.add("copy-success");
              setTimeout(() => {
                copyIcon.classList.remove("hidden");
                successIcon.classList.add("hidden");
                button.classList.remove("copy-success");
              }, 2000);
            } catch (err) {
              console.error("Failed to copy:", err);
            }
          });
        });
      });
    </script>

    <style is:inline>
      .btn-copy {
        position: relative;
        overflow: hidden;
      }
      .copy-success {
        animation: pulse 0.5s ease-in-out;
      }
      .frosti-code-toolbar-copy-success svg {
        color: #10b981;
      }
      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
        100% {
          transform: scale(1);
        }
      }
    </style>
  </body>
</html>